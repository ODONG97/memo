recovery manager

rman target /
ㄴ 오라클 복구 하는데 사용,, recover를 어떤 command를 쓰는지 ( EE Single 에서 지원 )

local site -> RAC / 기타 이슈에 의한 데이터 손실 방지 / 고가용성 ASM을 통해 미러링
플래시백, recovery adviser 데이터 손실 복구 / 데이터 백업 RMAN

OSB ( Oracle Secure Backup ) 테잎에 백업 
넷백업 = 제일 많이 써

데이터를 테이프에 백업 하는 이유
ㄴ 용량이 크고 가격이 저렴해서 장기 보관하기 유용하다

오라클 지드라 : 백업을 위해 나온 서버 , 백업을 관리하기 위한 DB
Zero Data Loss Recovery Appliance = 여러 서버에 백업을 저 장비 하나로 관리, 
다른 시스템은 OS에서도 받을 수 있는데 지드라는 오로지 디비(Oracle RDBMS)만 백업

OCI 상에서 백업 = ZDLRA 사용 = RMAN 사용
Physical : RMAN
Logical -> Flash Back 유실하기 전 시점으로 돌려
Recovery Analysis : Data Recovery Advisor -> 어떤 명령어를 사용해서 복구하라는 가이드
Physical Data Protection : Active Data Guard -> 로컬 사이트에 인하우스 피지컬한 장애 일 때 인하우스 밖에 있는 DR 기동(only DB)

tape = unused compression 동작 x - > 오라클 프로그램은 가능하기 때문에 외부 프로그램과 비교 했을 때 크기 차이가 날 수 있다.
Encryption Backup : 백업셋에 암호화

rman begin end backup
OS 블록보다 DB 블록이 더 큼
정합성이 깨짐 -> 시점이 일치하지 않기 때문에
아카이브 로그가 해당 블록의 첫 번째 변경이 일어나는 redo log는 insert 가 있어야 하는데 아카이브에 보관
블록 채로 아카이브에 저장
안 맞는 정합성이 온전한 블록으로 다음 변경 구문은 구문채로 변경
첫 번째 변경분만 블록 이미지로 가질 수 있음


rman 은 왜 필요가 없는가? 복사할 때 rman에서 항상 8k 통째로 복사하도록 보증해주기 때문에 Begin 백업이 필요가 없음

타겟 디비 = 백업 대상  , Aux 디비 = 임시 디비
서버 세션 = RMAN tngod tptus
option 밑에 채널 -> disk mml(media management Library=tape)
일반 디스크 FRA(기간이 지난 애들은 자동으로 삭제

백업 정보 보관 ( 1차, control file ) / 2차 ( Recovery Catalog Database -> 가급적 다른 서버, 여러 타겟의 백업 중앙에서 관리)
RMAN repository -> 백업 했다는 기록 남기고 7일(default) 뒤 백업 정보만 사라짐

컨트롤 파일 = 한정된 저장 용량, 복구 힘들어 다중화, 관리 요구 사항 매우 간단
recovery catalog database : 백업 대상 database가 많은 경우, 백업 정보 장기간 보관, recovery catalog db(스크립트 저장 후 call)
point in time tablespace recovery : 여러 시간대에 반복적으로 수행 가능
current control file 존재 x = 자동 복구
customized report 생성 가능, KEEP FOREVER = 영원히 보관, 주기 설정

타겟디비와 동일한 디비에 생성 금지 -> 가급적 서버도 다른 서버 / 카탈로그 디비도 백업 필요 /
resync overhead 존재(카탈로그와 백업 정보 동기화)

Channel : 논리적으로 데이터 전송 스트림 구성 8~16정도 -> 너무 많이 주면 전체 i/o 다 쓰면  안돼 //
Backup, copy, Restore, Recover 등 명령어는 적어도 하나의 채널을 필요로 함
채널 수는 오퍼레이션 Parallelism 결젇, 채널별 다양한 제약이나 옵션 설정 가능

rac 는 노드 별로 채널 따로 할당 가능
나눠 돌리는 이유 = 서버에 cpu나 i/o 의 부하를 막기 위해 나눠서 돌림

Backup Set = rman 전용 상태 -? > OS에 떨어지는 상태는 
이미지 카피 는 os 1:1 copy

이미지 카피 쓰는 이유 = restore 없이 서버를 빨리 기동하고 싶을 때 -> 완성된 데이터 파일 바로 mount해서 아카이브 오픈
테이프 백업 지원을 안 하기 때문에 
장애가 날 경우 경로만 바꿔주고 오픈하기 때문에 

rman 백업 셋이 1차가 되면 안 되는 이유 : 용량이 너무 커서
incremental backup : 과거로 돌아갈 수 없기 때문에 메인은 안 되는데 장애 시점으로 돌릴 수 없어서 이미지 카피는 메인 백업으로 못해
메인셋은 사이즈가 작은 백업 셋으로 
recovery 전에 restore 절차가 필요함
단 아카이브 로그 파일은 리커버리를 치면 자동으로 리커버리해서 리커버리 경로에다 아카이브 백업을 만들어줌

백업 피스는 백업 셋의 물리적 단위

이미지 카피 = OS에 1:1 카피 -> begin 필요 x = tape 백업 불가 = only os
원본과 1:1 = null / unused block compression 지원 x
restore 없이 database에 사용 가능

retention policy -> 백업 보관 정책, 상호 배타적=1개만 선택 가능
recovery window : 그 날짜에 어느 시점으로 라도 복구가 가능

stand-alone type : 단일 명령어로 수행하면 채널 할당 빠짐

job type : run 명령어에 순차적(절차적)으로 수행하도록, 상위 명령 실패시 하위 명령도 수행 x

영구 설정(Persistent Setting for RMAN)
컨트롤 파일에 저장, 레파지토리 디비에 저장
ㄴ 자동 채널 구성, 백업 복사본, backup retention policy 지정
컨트롤파일 오토백업 = ON으로 하는게 좋음
ㄴ 백업 후에 컨트롤 파일 백업
ㄴ 경로 지정 안 할 시 오라클 홈 밑에 dbs에 저장
increption - 암호화
advanced security option
snapshot controlfile - rac ( shared disk ) : controlfile을 정지 시킬 수 업어서 백업 해놓고

풀 백업 전략을 쓸 때? 매일 풀 백업을 받을 때 백업 시간과 백업 공간의 제약 덜 받음, DB가 작을 때

Incremental Backup
-> 전혀 사용하지 않은 블록을 제외한 블록을 모두 포함하는 레벨0
->이전 백업을 수행한 이후 변경된 블록만 포함하는 레벨1
큐믈레이티브 레벨1 :
지드라 : 레벨0은 딱 한 번만 받으면 됨, 아카이브 백업은 따로 안 해도 됨
가상의 풀 백업(지드라) = Index BackUp == 딱 한번 풀 백업 이후 Incremental 기용

db 복제? 데이터베이스를 온라인에서 디비 복제
백업 베이스 dup
rman 노드 받은거를 타겟에 가져다 놓고

active 운영중인 디비를 운영중에 복제
데이터 가드 구성 할 때, 개발 디비 만들 때

BCT
시간 단축 -> BCT만 읽음 ->그러지 않으면 디비를 다 스캔해야 해서 i/o가 많이 발생하기 때문에 가장 최근 정보만 읽음
-> Fast Incremental Backup 하기 위해서 필요해
유지 관리 자동으로 되고, 운영중 enable 확인, rac인 경우 반드시 shared disk 에 둬야함 각 노드에 두는거 하지마
bct 변경 구문 = alert 에 기록

멀티 섹션 : 하나의 큰 파일을 각 채널에 잘라서 저장하는 기능
maxopenfiles : 하나의 섹션에 들어가는 파일 개수 달라지게

널 블록 compression : extent가 할당되지 않고 사용하지 않은 공간 = 백업에서 제외
ㄴ 이미지 카피를 제외한 모든 백업에서 동작
Binary compression : 백업된 블록들에 대한 추가적인 compression

unused block compression : data가 없는 블록 = 백업에서 제외 = 공간이 더 줄어들어버려 = OSB 사용할 때 동작
allocated + data 만 백업









